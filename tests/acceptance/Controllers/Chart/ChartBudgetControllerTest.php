<?php
/**
 * ChartBudgetControllerTest.php
 * Copyright (C) 2016 Sander Dorigo
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 */
use Carbon\Carbon;
use FireflyIII\Models\Budget;
use Illuminate\Support\Collection;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-19 at 15:39:57.
 */
class ChartBudgetControllerTest extends TestCase
{

    /**
     * @covers FireflyIII\Http\Controllers\Chart\BudgetController::budget
     */
    public function testBudget()
    {

        $repository = Mockery::mock('FireflyIII\Repositories\Budget\BudgetRepositoryInterface');
        $repository->shouldReceive('getExpensesPerMonth')->once()->andReturn(new Collection([new Budget]));
        $repository->shouldReceive('getFirstBudgetLimitDate')->once()->andReturn(new Carbon);

        $this->app->instance('FireflyIII\Repositories\Budget\BudgetRepositoryInterface', $repository);

        $this->be($this->user());
        $response = $this->call('GET', '/chart/budget/1');
        $this->assertEquals(200, $response->status());
        //$this->markTestSkipped('Skipped because sqlite does not support DATE_FORMAT.');
    }

    /**
     * @covers FireflyIII\Http\Controllers\Chart\BudgetController::budgetLimit
     */
    public function testBudgetLimit()
    {
        $this->be($this->user());
        $response = $this->call('GET', '/chart/budget/1/1');

        $this->assertEquals(200, $response->status());
    }

    /**
     * @covers FireflyIII\Http\Controllers\Chart\BudgetController::frontpage
     */
    public function testFrontpage()
    {
        $this->be($this->user());
        $response = $this->call('GET', '/chart/budget/frontpage');

        $this->assertEquals(200, $response->status());
    }

    /**
     * @covers FireflyIII\Http\Controllers\Chart\BudgetController::multiYear
     */
    public function testMultiYear()
    {

        $repository = Mockery::mock('FireflyIII\Repositories\Budget\BudgetRepositoryInterface');
        $repository->shouldReceive('getBudgetedPerYear')->once()->andReturn(new Collection);
        $repository->shouldReceive('getBudgetsAndExpensesPerYear')->once()->andReturn([]);

        $this->app->instance('FireflyIII\Repositories\Budget\BudgetRepositoryInterface', $repository);


        $this->be($this->user());
        $response = $this->call('GET', '/chart/budget/multi-year/default/20150101/20160101/1/1');
        $this->assertEquals(200, $response->status());

    }

    /**
     * @covers FireflyIII\Http\Controllers\Chart\BudgetController::year
     */
    public function testYear()
    {
        $repository = Mockery::mock('FireflyIII\Repositories\Budget\BudgetRepositoryInterface');
        $repository->shouldReceive('getBudgetsAndExpensesPerMonth')->once()->andReturn([]);

        $this->app->instance('FireflyIII\Repositories\Budget\BudgetRepositoryInterface', $repository);

        $this->be($this->user());
        $response = $this->call('GET', '/chart/budget/year/default/20150101/20151231/1');
        $this->assertEquals(200, $response->status());

    }
}
