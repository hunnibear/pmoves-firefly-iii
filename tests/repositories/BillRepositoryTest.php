<?php
use Carbon\Carbon;
use FireflyIII\Models\Bill;
use FireflyIII\Repositories\Bill\BillRepository;
use League\FactoryMuffin\Facade as FactoryMuffin;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-08 at 10:43:42.
 */
class BillRepositoryTest extends TestCase
{
    /**
     * @var BillRepository
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        $this->object = new BillRepository;
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function tearDown()
    {
        parent::tearDown();
    }

    /**
     * @covers FireflyIII\Repositories\Bill\BillRepository::createFakeBill
     */
    public function testCreateFakeBill()
    {
        $description = 'Fake bill ' . rand(10, 100);
        $date        = new Carbon('2013-01-01');
        $amount      = 1200;
        $bill        = $this->object->createFakeBill($description, $date, $amount);

        $this->assertEquals($amount, $bill->amount_max);
        $this->assertEquals($amount, $bill->amount_min);
        $this->assertNull($bill->id);
        $this->assertEquals($description, $bill->name);

    }

    /**
     * @covers FireflyIII\Repositories\Bill\BillRepository::destroy
     */
    public function testDestroy()
    {
        $bill = FactoryMuffin::create('FireflyIII\Models\Bill');
        $id   = $bill->id;
        $this->object->destroy($bill);

        // cannot find bill:
        $this->assertCount(0, Bill::whereId($id)->whereNotNull('deleted_at')->get());
    }

    /**
     * @covers FireflyIII\Repositories\Bill\BillRepository::getActiveBills
     */
    public function testGetActiveBills()
    {
        $bill1 = FactoryMuffin::create('FireflyIII\Models\Bill');
        $bill2 = FactoryMuffin::create('FireflyIII\Models\Bill');

        // update bills
        $bill1->active  = 1;
        $bill2->active  = 0;
        $bill2->user_id = $bill1->user_id;
        $bill1->save();
        $bill2->save();
        $this->be($bill1->user);

        $set = $this->object->getActiveBills();

        $this->assertCount(1, $set);
    }

    /**
     * @covers FireflyIII\Repositories\Bill\BillRepository::getBills
     */
    public function testGetBills()
    {
        $bill1 = FactoryMuffin::create('FireflyIII\Models\Bill');
        $bill2 = FactoryMuffin::create('FireflyIII\Models\Bill');

        // update bills
        $bill1->active  = 1;
        $bill2->active  = 0;
        $bill2->user_id = $bill1->user_id;
        $bill1->save();
        $bill2->save();
        $this->be($bill1->user);

        $set = $this->object->getBills();

        $this->assertCount(2, $set);
    }

    /**
     * @covers FireflyIII\Repositories\Bill\BillRepository::getJournals
     */
    public function testGetJournals()
    {
        $bill1 = FactoryMuffin::create('FireflyIII\Models\Bill');

        // update bills
        $bill1->active = 1;
        $bill1->save();
        $this->be($bill1->user);

        $set = $this->object->getJournals($bill1);

        $this->assertCount(0, $set);
    }

    /**
     * @covers FireflyIII\Repositories\Bill\BillRepository::getJournalsInRange
     * @todo   Implement testGetJournalsInRange().
     */
    public function testGetJournalsInRange()
    {
        $bill1 = FactoryMuffin::create('FireflyIII\Models\Bill');

        // update bills
        $bill1->active = 1;
        $bill1->save();
        $this->be($bill1->user);

        $set = $this->object->getJournalsInRange($bill1, new Carbon, new Carbon);

        $this->assertCount(0, $set);
    }

    /**
     * @covers FireflyIII\Repositories\Bill\BillRepository::getPossiblyRelatedJournals
     * @todo   Implement testGetPossiblyRelatedJournals().
     */
    public function testGetPossiblyRelatedJournals()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers FireflyIII\Repositories\Bill\BillRepository::getRanges
     * @todo   Implement testGetRanges().
     */
    public function testGetRanges()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers FireflyIII\Repositories\Bill\BillRepository::lastFoundMatch
     * @todo   Implement testLastFoundMatch().
     */
    public function testLastFoundMatch()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers FireflyIII\Repositories\Bill\BillRepository::nextExpectedMatch
     * @todo   Implement testNextExpectedMatch().
     */
    public function testNextExpectedMatch()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers FireflyIII\Repositories\Bill\BillRepository::scan
     * @todo   Implement testScan().
     */
    public function testScan()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers FireflyIII\Repositories\Bill\BillRepository::store
     * @todo   Implement testStore().
     */
    public function testStore()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers FireflyIII\Repositories\Bill\BillRepository::update
     * @todo   Implement testUpdate().
     */
    public function testUpdate()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
