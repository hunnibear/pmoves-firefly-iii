<?php
use Carbon\Carbon;
use FireflyIII\Models\Tag;
use FireflyIII\Repositories\Tag\TagRepository;
use League\FactoryMuffin\Facade as FactoryMuffin;

/**
 * @SuppressWarnings(PHPMD.TooManyMethods)
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-05 at 19:19:32.
 */
class TagRepositoryBasicTest extends TestCase
{
    /**
     * @var TagRepository
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        $this->object = new TagRepository;
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function tearDown()
    {
        parent::tearDown();
    }
    /**
     * @covers FireflyIII\Repositories\Tag\TagRepository::update
     */
    public function testUpdate()
    {
        $tag = FactoryMuffin::create('FireflyIII\Models\Tag');


        $data = [
            'tag'         => 'Hello' . rand(1, 100),
            'date'        => '2012-01-01',
            'description' => 'Some',
            'latitude'    => 12,
            'longitude'   => 13,
            'zoomLevel'   => 4,
            'tagMode'     => 'nothing'
        ];
        $this->be($tag->user);

        $newTag = $this->object->update($tag, $data);
        $this->assertEquals($data['tag'], $newTag->tag);
        $this->assertEquals($tag->id, $newTag->id);
    }

    /**
     * @covers FireflyIII\Repositories\Tag\TagRepository::store
     */
    public function testStore()
    {
        $user = FactoryMuffin::create('FireflyIII\User');

        $data = [
            'tag'         => 'Hello' . rand(1, 100),
            'date'        => '2012-01-01',
            'description' => 'Some',
            'latitude'    => 12,
            'longitude'   => 13,
            'zoomLevel'   => 4,
            'tagMode'     => 'nothing'
        ];
        $this->be($user);

        $tag = $this->object->store($data);
        $this->assertEquals($data['tag'], $tag->tag);
    }


    /**
     * @covers FireflyIII\Repositories\Tag\TagRepository::destroy
     */
    public function testDestroy()
    {
        $tag = FactoryMuffin::create('FireflyIII\Models\Tag');
        $this->object->destroy($tag);

        $this->assertCount(0, Tag::where('id', $tag->id)->whereNull('deleted_at')->get());

    }

    /**
     * @covers FireflyIII\Repositories\Tag\TagRepository::get
     */
    public function testGet()
    {
        $user          = FactoryMuffin::create('FireflyIII\User');
        $tag1          = FactoryMuffin::create('FireflyIII\Models\Tag');
        $tag2          = FactoryMuffin::create('FireflyIII\Models\Tag');
        $tag1->tag     = 'BBB';
        $tag2->tag     = 'AAA';
        $tag1->user_id = $user->id;
        $tag2->user_id = $user->id;

        $tag1->save();
        $tag2->save();

        $this->be($user);

        $set = $this->object->get();

        $this->assertCount(2, $set);
        $this->assertEquals('AAA', $set->first()->tag);
    }


    /**
     * @covers FireflyIII\Repositories\Tag\TagRepository::coveredByBalancingActs
     */
    public function testCoveredByBalancingActs()
    {
        // create a user:
        $user = FactoryMuffin::create('FireflyIII\User');
        $this->be($user);

        // create transaction and account types:
        FactoryMuffin::create('FireflyIII\Models\TransactionType'); // withdrawal
        FactoryMuffin::create('FireflyIII\Models\TransactionType'); // deposit
        $transfer = FactoryMuffin::create('FireflyIII\Models\TransactionType'); // transfer
        FactoryMuffin::create('FireflyIII\Models\AccountType'); // expense
        FactoryMuffin::create('FireflyIII\Models\AccountType'); // revenue
        $asset = FactoryMuffin::create('FireflyIII\Models\AccountType'); // asset

        // create two accounts:
        $fromAccount                  = FactoryMuffin::create('FireflyIII\Models\Account'); // asset
        $toAccount                    = FactoryMuffin::create('FireflyIII\Models\Account'); // asset
        $fromAccount->account_type_id = $asset->id;
        $toAccount->account_type_id   = $asset->id;
        $fromAccount->save();
        $toAccount->save();


        // create a tag
        $tag          = FactoryMuffin::create('FireflyIII\Models\Tag');
        $tag->tagMode = 'balancingAct';
        $tag->user_id = $user->id;
        $tag->save();

        // date
        $today = new Carbon('2014-01-12');
        $start = new Carbon('2014-01-01');
        $end   = new Carbon('2014-01-31');

        // store five journals
        for ($i = 0; $i < 5; $i++) {
            $journal = FactoryMuffin::create('FireflyIII\Models\TransactionJournal'); // deposit!
            // set date:
            $journal->date                = $today;
            $journal->user_id             = $user->id;
            $journal->transaction_type_id = $transfer->id;
            $journal->tags()->save($tag);
            $journal->save();

            // update accounts:
            $journal->transactions[0]->account_id = $fromAccount->id;
            $journal->transactions[0]->amount     = '-100';
            $journal->transactions[0]->save();
            $journal->transactions[1]->account_id = $toAccount->id;
            $journal->transactions[1]->amount     = '100';
            $journal->transactions[1]->save();

        }

        $amount = $this->object->coveredByBalancingActs($toAccount, $start, $end);
        // five transactions, 100 each.
        $this->assertEquals('500', $amount);
    }

}
