{% extends "layout.v1" %}

{% block breadcrumbs %}
    {{ Breadcrumbs.render(Route.currentRouteName) }}
{% endblock %}

{% block content %}
<div class="container-fluid" id="couples-mobile-app">
    <!-- Mobile-First Couples Dashboard -->
    <div class="row">
        <div class="col-12">
            <!-- Header with Real-time Status -->
            <div class="card bg-gradient-primary text-white mb-3">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h4 class="mb-1">Couples Budget</h4>
                            <p class="mb-0" id="sync-status">Syncing with Supabase...</p>
                        </div>
                        <div class="text-right">
                            <div id="total-balance" class="h3 mb-0">$0.00</div>
                            <small>Total Balance</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Partner Cards with Real-time Updates -->
            <div class="row mb-3">
                <div class="col-6">
                    <div class="card border-info">
                        <div class="card-body text-center p-3">
                            <div id="partner1-avatar" class="mb-2">
                                <i class="fas fa-user-circle fa-2x text-info"></i>
                            </div>
                            <h6 id="partner1-name" class="mb-1">Partner 1</h6>
                            <div id="partner1-balance" class="h5 text-info">$0.00</div>
                            <small class="text-muted">Personal</small>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="card border-success">
                        <div class="card-body text-center p-3">
                            <div id="partner2-avatar" class="mb-2">
                                <i class="fas fa-user-circle fa-2x text-success"></i>
                            </div>
                            <h6 id="partner2-name" class="mb-1">Partner 2</h6>
                            <div id="partner2-balance" class="h5 text-success">$0.00</div>
                            <small class="text-muted">Personal</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Shared Expenses Card -->
            <div class="card border-warning mb-3">
                <div class="card-header bg-warning text-dark">
                    <h6 class="mb-0">
                        <i class="fas fa-handshake mr-2"></i>
                        Shared Expenses
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-4">
                            <div id="shared-total" class="h5 text-warning">$0.00</div>
                            <small>Total</small>
                        </div>
                        <div class="col-4">
                            <div id="partner1-share" class="h6">$0.00</div>
                            <small id="partner1-name-share">P1 Share</small>
                        </div>
                        <div class="col-4">
                            <div id="partner2-share" class="h6">$0.00</div>
                            <small id="partner2-name-share">P2 Share</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="card mb-3">
                <div class="card-header">
                    <h6 class="mb-0">Quick Actions</h6>
                </div>
                <div class="card-body p-2">
                    <div class="row">
                        <div class="col-3">
                            <button class="btn btn-primary btn-sm w-100" onclick="openAddTransaction()">
                                <i class="fas fa-plus"></i><br>
                                <small>Add</small>
                            </button>
                        </div>
                        <div class="col-3">
                            <button class="btn btn-info btn-sm w-100" onclick="openTransferModal()">
                                <i class="fas fa-exchange-alt"></i><br>
                                <small>Transfer</small>
                            </button>
                        </div>
                        <div class="col-3">
                            <button class="btn btn-success btn-sm w-100" onclick="runAIAnalysis()">
                                <i class="fas fa-robot"></i><br>
                                <small>AI</small>
                            </button>
                        </div>
                        <div class="col-3">
                            <button class="btn btn-warning btn-sm w-100" onclick="openGoalsModal()">
                                <i class="fas fa-bullseye"></i><br>
                                <small>Goals</small>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Transactions with AI Categories -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">Recent Transactions</h6>
                    <button class="btn btn-outline-primary btn-sm" onclick="refreshTransactions()">
                        <i class="fas fa-sync" id="refresh-icon"></i>
                    </button>
                </div>
                <div class="card-body p-0">
                    <div id="transactions-list" class="list-group list-group-flush">
                        <!-- Transactions loaded via Supabase real-time -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Transaction Modal -->
<div class="modal fade" id="addTransactionModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-bottom">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Transaction</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addTransactionForm">
                    <div class="form-group">
                        <label>Description</label>
                        <input type="text" class="form-control" id="transaction-description" placeholder="What did you buy?">
                        <div id="ai-suggestions" class="mt-2"></div>
                    </div>
                    <div class="form-group">
                        <label>Amount</label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">$</span>
                            </div>
                            <input type="number" class="form-control" id="transaction-amount" step="0.01">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Category</label>
                        <select class="form-control" id="transaction-category">
                            <option value="">AI will categorize...</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Assign to</label>
                        <div class="btn-group btn-group-toggle w-100" data-toggle="buttons">
                            <label class="btn btn-outline-info">
                                <input type="radio" name="assignTo" value="partner1"> Partner 1
                            </label>
                            <label class="btn btn-outline-success">
                                <input type="radio" name="assignTo" value="partner2"> Partner 2
                            </label>
                            <label class="btn btn-outline-warning">
                                <input type="radio" name="assignTo" value="shared"> Shared
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitTransaction()">
                    <i class="fas fa-robot mr-1"></i>Add with AI
                </button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascript %}
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
<script>
// Initialize Supabase connection
const supabaseUrl = '{{ env('SUPABASE_URL') }}';
const supabaseKey = '{{ env('SUPABASE_ANON_KEY') }}';
const supabase = supabase.createClient(supabaseUrl, supabaseKey);

// Mobile-optimized couples app
class CouplesMobileApp {
    constructor() {
        this.user = @json(Auth::user());
        this.setupRealtimeSubscriptions();
        this.loadInitialData();
        this.setupAIIntegration();
    }

    setupRealtimeSubscriptions() {
        // Real-time transaction updates
        supabase
            .channel('couples-transactions')
            .on('postgres_changes', {
                event: '*',
                schema: 'public',
                table: 'transactions',
                filter: `user_id=eq.${this.user.id}`
            }, (payload) => {
                this.handleTransactionUpdate(payload);
            })
            .subscribe();

        // Real-time balance updates
        supabase
            .channel('couples-balances')
            .on('postgres_changes', {
                event: '*',
                schema: 'public',
                table: 'accounts',
                filter: `user_id=eq.${this.user.id}`
            }, (payload) => {
                this.updateBalances();
            })
            .subscribe();
    }

    async loadInitialData() {
        try {
            // Load couples data via Firefly API
            const response = await fetch('{{ route('api.v1.couples.dashboard') }}', {
                headers: {
                    'Authorization': `Bearer {{ auth()->user()->createToken('mobile-app')->plainTextToken }}`,
                    'Accept': 'application/json'
                }
            });
            
            const data = await response.json();
            this.updateDashboard(data);
            
            document.getElementById('sync-status').textContent = 'Synced';
        } catch (error) {
            console.error('Failed to load data:', error);
            document.getElementById('sync-status').textContent = 'Offline';
        }
    }

    setupAIIntegration() {
        // AI-powered transaction categorization as user types
        document.getElementById('transaction-description').addEventListener('input', 
            this.debounce(async (e) => {
                const description = e.target.value;
                if (description.length > 3) {
                    await this.getAISuggestions(description);
                }
            }, 500)
        );
    }

    async getAISuggestions(description) {
        try {
            const response = await fetch('{{ route('ai.categorize') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify({ description })
            });

            const suggestions = await response.json();
            this.displayAISuggestions(suggestions);
        } catch (error) {
            console.error('AI categorization failed:', error);
        }
    }

    displayAISuggestions(suggestions) {
        const container = document.getElementById('ai-suggestions');
        container.innerHTML = suggestions.categories.map(cat => 
            `<span class="badge badge-info mr-1 cursor-pointer" onclick="selectCategory('${cat.id}')">${cat.name}</span>`
        ).join('');
    }

    async submitTransaction() {
        const form = document.getElementById('addTransactionForm');
        const formData = new FormData(form);
        
        // Add AI enhancement
        formData.append('use_ai', true);
        
        try {
            const response = await fetch('{{ route('api.v1.couples.transactions.store') }}', {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                },
                body: formData
            });

            if (response.ok) {
                $('#addTransactionModal').modal('hide');
                form.reset();
                this.showToast('Transaction added successfully!', 'success');
            }
        } catch (error) {
            this.showToast('Failed to add transaction', 'error');
        }
    }

    updateDashboard(data) {
        // Update balances
        document.getElementById('total-balance').textContent = `$${data.totalBalance.toFixed(2)}`;
        document.getElementById('partner1-balance').textContent = `$${data.partner1.balance.toFixed(2)}`;
        document.getElementById('partner2-balance').textContent = `$${data.partner2.balance.toFixed(2)}`;
        
        // Update shared expenses
        document.getElementById('shared-total').textContent = `$${data.shared.total.toFixed(2)}`;
        document.getElementById('partner1-share').textContent = `$${data.shared.partner1Share.toFixed(2)}`;
        document.getElementById('partner2-share').textContent = `$${data.shared.partner2Share.toFixed(2)}`;
        
        // Update transaction list
        this.renderTransactions(data.recentTransactions);
    }

    renderTransactions(transactions) {
        const container = document.getElementById('transactions-list');
        container.innerHTML = transactions.map(tx => `
            <div class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <h6 class="mb-1">${tx.description}</h6>
                    <small class="text-muted">
                        ${tx.ai_category || tx.category} • ${tx.date}
                        ${tx.ai_category ? '<i class="fas fa-robot text-info ml-1" title="AI Categorized"></i>' : ''}
                    </small>
                </div>
                <div class="text-right">
                    <span class="badge badge-${tx.assignedTo === 'shared' ? 'warning' : 'primary'}">
                        $${tx.amount.toFixed(2)}
                    </span>
                </div>
            </div>
        `).join('');
    }

    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    showToast(message, type) {
        // Bootstrap toast implementation
        const toast = document.createElement('div');
        toast.className = `toast ${type === 'error' ? 'bg-danger' : 'bg-success'} text-white`;
        toast.innerHTML = `<div class="toast-body">${message}</div>`;
        document.body.appendChild(toast);
        $(toast).toast({ delay: 3000 }).toast('show');
    }
}

// Initialize app when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    window.couplesApp = new CouplesMobileApp();
});

// Global functions for UI interactions
function openAddTransaction() {
    $('#addTransactionModal').modal('show');
}

function runAIAnalysis() {
    window.couplesApp.showToast('Running AI analysis...', 'info');
    // Trigger AI analysis via existing AI dashboard
    window.open('{{ route('ai.dashboard') }}?context=couples', '_blank');
}

function selectCategory(categoryId) {
    document.getElementById('transaction-category').value = categoryId;
}
</script>

<style>
/* Mobile-optimized styles */
.modal-dialog-bottom {
    margin: 0;
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    max-width: 100%;
}

@media (max-width: 768px) {
    .card-body {
        padding: 1rem;
    }
    
    .btn-group-toggle .btn {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem;
    }
}

.cursor-pointer {
    cursor: pointer;
}

.list-group-item {
    border-left: none;
    border-right: none;
}

.toast {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
}
</style>
{% endblock %}