{% extends "layout.default" %}

{% block breadcrumbs %}
    {{ Breadcrumbs.render(Route.currentRouteName) }}
{% endblock %}

{% block content %}
<div class="container-fluid" id="couples-dashboard">
    <!-- Real-time Status Banner -->
    <div class="alert alert-info d-flex justify-content-between align-items-center">
        <div>
            <i class="fas fa-sync-alt mr-2"></i>
            <strong>Live Dashboard</strong> - Connected to Supabase & AI Services
        </div>
        <div>
            <span class="badge badge-success" id="connection-status">Connected</span>
            <a href="/ai" class="btn btn-sm btn-outline-info ml-2">
                <i class="fas fa-robot"></i> AI Dashboard
            </a>
        </div>
    </div>

    <!-- Mobile-First Cards Layout -->
    <div class="row">
        <!-- Financial Overview Card -->
        <div class="col-12 col-lg-8 mb-4">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-line mr-2"></i>
                        Couples Financial Overview
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row text-center mb-4">
                        <div class="col-4">
                            <h3 id="total-balance" class="text-primary">$0.00</h3>
                            <small class="text-muted">Total Balance</small>
                        </div>
                        <div class="col-4">
                            <h3 id="monthly-spending" class="text-warning">$0.00</h3>
                            <small class="text-muted">This Month</small>
                        </div>
                        <div class="col-4">
                            <h3 id="shared-expenses" class="text-success">$0.00</h3>
                            <small class="text-muted">Shared</small>
                        </div>
                    </div>

                    <!-- Partner Balance Cards -->
                    <div class="row">
                        <div class="col-6">
                            <div class="card border-info">
                                <div class="card-body text-center p-3">
                                    <div class="mb-2">
                                        <i class="fas fa-user-circle fa-2x text-info"></i>
                                    </div>
                                    <h6 id="partner1-name" class="mb-1">Partner 1</h6>
                                    <h5 id="partner1-balance" class="text-info mb-1">$0.00</h5>
                                    <small class="text-muted">Personal</small>
                                    <div class="progress mt-2" style="height: 5px;">
                                        <div id="partner1-progress" class="progress-bar bg-info" style="width: 50%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="card border-success">
                                <div class="card-body text-center p-3">
                                    <div class="mb-2">
                                        <i class="fas fa-user-circle fa-2x text-success"></i>
                                    </div>
                                    <h6 id="partner2-name" class="mb-1">Partner 2</h6>
                                    <h5 id="partner2-balance" class="text-success mb-1">$0.00</h5>
                                    <small class="text-muted">Personal</small>
                                    <div class="progress mt-2" style="height: 5px;">
                                        <div id="partner2-progress" class="progress-bar bg-success" style="width: 50%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Actions Sidebar -->
        <div class="col-12 col-lg-4 mb-4">
            <div class="card h-100">
                <div class="card-header bg-dark text-white">
                    <h6 class="mb-0">
                        <i class="fas fa-bolt mr-2"></i>
                        Quick Actions
                    </h6>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" onclick="openAddTransactionModal()">
                            <i class="fas fa-plus mr-2"></i>Add Transaction
                        </button>
                        <button class="btn btn-secondary" onclick="openReceiptUpload()">
                            <i class="fas fa-camera mr-2"></i>Upload Receipt
                        </button>
                        <button class="btn btn-info" onclick="runAIAnalysis()">
                            <i class="fas fa-robot mr-2"></i>AI Analysis
                        </button>
                        <button class="btn btn-success" onclick="openGoalsModal()">
                            <i class="fas fa-bullseye mr-2"></i>Manage Goals
                        </button>
                        <button class="btn btn-warning" onclick="openImportModal()">
                            <i class="fas fa-upload mr-2"></i>Import Data
                        </button>
                    </div>

                    <!-- AI Insights Panel -->
                    <div class="mt-4">
                        <h6>
                            <i class="fas fa-lightbulb mr-2"></i>AI Insights
                        </h6>
                        <div id="ai-insights" class="small">
                            <div class="text-muted">Loading AI insights...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Transactions with AI Categories -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-list mr-2"></i>
                        Recent Transactions
                    </h5>
                    <div>
                        <button class="btn btn-sm btn-outline-secondary" onclick="refreshTransactions()">
                            <i class="fas fa-sync" id="refresh-icon"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-primary" onclick="viewAllTransactions()">
                            View All
                        </button>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>Date</th>
                                    <th>Description</th>
                                    <th>Category</th>
                                    <th>Amount</th>
                                    <th>Assigned To</th>
                                    <th>AI</th>
                                </tr>
                            </thead>
                            <tbody id="transactions-table">
                                <tr>
                                    <td colspan="6" class="text-center text-muted py-4">
                                        Loading transactions...
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Transaction Modal -->
<div class="modal fade" id="addTransactionModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus mr-2"></i>Add Transaction with AI
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addTransactionForm">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Description</label>
                            <input type="text" class="form-control" id="transaction-description" 
                                   placeholder="What did you buy?" required>
                            <div id="ai-suggestions" class="mt-2"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Amount</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="transaction-amount" 
                                       step="0.01" placeholder="0.00" required>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Category</label>
                            <select class="form-select" id="transaction-category">
                                <option value="">AI will categorize...</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Account</label>
                            <select class="form-select" id="transaction-account" required>
                                <option value="">Select account...</option>
                            </select>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Assign to</label>
                        <div class="btn-group w-100" role="group">
                            <input type="radio" class="btn-check" name="assignTo" value="partner1" id="assign-p1">
                            <label class="btn btn-outline-info" for="assign-p1">Partner 1</label>
                            
                            <input type="radio" class="btn-check" name="assignTo" value="partner2" id="assign-p2">
                            <label class="btn btn-outline-success" for="assign-p2">Partner 2</label>
                            
                            <input type="radio" class="btn-check" name="assignTo" value="shared" id="assign-shared">
                            <label class="btn btn-outline-warning" for="assign-shared">Shared</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitTransaction()">
                    <i class="fas fa-robot mr-1"></i>Add with AI
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Processing Indicator -->
<div id="processing-indicator" class="alert alert-info position-fixed" style="top: 20px; left: 50%; transform: translateX(-50%); z-index: 9999; display: none;">
    <i class="fas fa-spinner fa-spin"></i> Processing...
</div>

<!-- Receipt Review Modal -->
<div class="modal fade" id="receiptReviewModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Review Receipt Data</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Extracted Data</h6>
                        <div class="mb-3">
                            <label class="form-label">Merchant</label>
                            <input type="text" class="form-control" id="extracted-merchant" readonly>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Amount</label>
                            <input type="number" class="form-control" id="extracted-amount" readonly>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Date</label>
                            <input type="date" class="form-control" id="extracted-date" readonly>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <input type="text" class="form-control" id="extracted-category" readonly>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6>AI Suggestions</h6>
                        <div class="mb-3">
                            <label class="form-label">Suggested Category</label>
                            <div class="form-control" id="ai-suggested-category">-</div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Confidence</label>
                            <div class="form-control" id="ai-confidence">-</div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Partner Assignment</label>
                            <div class="form-control" id="ai-assignment">-</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="approveReceiptData()">Approve & Add Transaction</button>
            </div>
        </div>
    </div>
</div>

<!-- Goals Modal -->
<div class="modal fade" id="goalsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Couples Goals</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> Goals feature coming soon! This will integrate with Firefly III's existing piggy banks and goals system.
                </div>
                <div class="mb-3">
                    <label class="form-label">Goal Name</label>
                    <input type="text" class="form-control" placeholder="e.g., Vacation Fund">
                </div>
                <div class="mb-3">
                    <label class="form-label">Target Amount</label>
                    <input type="number" class="form-control" placeholder="5000">
                </div>
                <div class="mb-3">
                    <label class="form-label">Target Date</label>
                    <input type="date" class="form-control">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary">Create Goal</button>
            </div>
        </div>
    </div>
</div>

<!-- Import Modal -->
<div class="modal fade" id="importModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Import Data</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Import Type</label>
                    <select class="form-control">
                        <option>Bank Statement (CSV)</option>
                        <option>Bank Statement (PDF)</option>
                        <option>Receipts (Images)</option>
                        <option>Firefly III Export</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">File</label>
                    <input type="file" class="form-control" accept=".csv,.pdf,.jpg,.png,.jpeg">
                </div>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i> Import functionality will process files using the AI system and suggest partner assignments.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary">Process Import</button>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block javascript %}
<script>
// Enhanced Couples Dashboard - Leveraging Existing Infrastructure
class CouplesEnhancedDashboard {
    constructor() {
        this.user = {{ auth_user() | json_encode | raw }};
        this.apiBaseUrl = '{{ route('api.v1.couples.state') }}';
        this.aiApiUrl = '/ai/categorize'; // Using direct AI endpoint
        this.init();
    }

    async init() {
        this.showLoadingState();
        await this.loadCouplesData();
        await this.loadAIInsights();
        this.setupEventListeners();
        this.setupRealTimeUpdates();
        this.setupDocumentUpload();
    }

    showLoadingState() {
        document.getElementById('connection-status').textContent = 'Connecting...';
        document.getElementById('connection-status').className = 'badge badge-warning';
    }

    async loadCouplesData() {
        try {
            // Use new API endpoint
            const response = await fetch('/couples/api/state', {
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                }
            });

            if (response.ok) {
                const data = await response.json();
                this.updateDashboard(data);
                this.updateConnectionStatus('Connected', 'success');
            } else {
                throw new Error('Failed to load couples data');
            }
        } catch (error) {
            console.error('Error loading couples data:', error);
            this.updateConnectionStatus('Error', 'danger');
        }
    }

    async loadAIInsights() {
        try {
            // Connect to existing AI service
            const response = await fetch('/ai/insights?context=couples', {
                headers: {
                    'Accept': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                }
            });

            if (response.ok) {
                const insights = await response.json();
                this.displayAIInsights(insights);
            }
        } catch (error) {
            console.error('Error loading AI insights:', error);
            document.getElementById('ai-insights').innerHTML = 
                '<div class="text-warning">AI insights temporarily unavailable</div>';
        }
    }

    updateDashboard(data) {
        // Update financial overview
        document.getElementById('total-balance').textContent = 
            `$${(data.totalBalance || 0).toFixed(2)}`;
        document.getElementById('monthly-spending').textContent = 
            `$${(data.monthlySpending || 0).toFixed(2)}`;
        document.getElementById('shared-expenses').textContent = 
            `$${(data.sharedExpenses || 0).toFixed(2)}`;

        // Update partner information
        if (data.partners) {
            document.getElementById('partner1-name').textContent = 
                data.partners.partner1?.name || 'Partner 1';
            document.getElementById('partner1-balance').textContent = 
                `$${(data.partners.partner1?.balance || 0).toFixed(2)}`;
            
            document.getElementById('partner2-name').textContent = 
                data.partners.partner2?.name || 'Partner 2';
            document.getElementById('partner2-balance').textContent = 
                `$${(data.partners.partner2?.balance || 0).toFixed(2)}`;

            // Update progress bars
            const total = (data.partners.partner1?.balance || 0) + (data.partners.partner2?.balance || 0);
            if (total > 0) {
                const p1Percent = ((data.partners.partner1?.balance || 0) / total) * 100;
                const p2Percent = ((data.partners.partner2?.balance || 0) / total) * 100;
                
                document.getElementById('partner1-progress').style.width = `${p1Percent}%`;
                document.getElementById('partner2-progress').style.width = `${p2Percent}%`;
            }
        }

        // Update transactions table
        this.updateTransactionsTable(data.recentTransactions || []);
    }

    updateTransactionsTable(transactions) {
        const tbody = document.getElementById('transactions-table');
        
        if (transactions.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="6" class="text-center text-muted py-4">
                        No transactions found. <a href="#" onclick="openAddTransactionModal()">Add your first transaction</a>
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = transactions.map(tx => `
            <tr>
                <td>${this.formatDate(tx.date)}</td>
                <td>
                    <strong>${tx.description}</strong>
                    ${tx.notes ? `<br><small class="text-muted">${tx.notes}</small>` : ''}
                </td>
                <td>
                    <span class="badge badge-light">${tx.category}</span>
                </td>
                <td class="${tx.amount >= 0 ? 'text-success' : 'text-danger'}">
                    ${tx.amount >= 0 ? '+' : ''}$${Math.abs(tx.amount).toFixed(2)}
                </td>
                <td>
                    <span class="badge badge-${this.getAssignmentBadgeColor(tx.assignment)}">
                        ${tx.assignment || 'Unassigned'}
                    </span>
                </td>
                <td>
                    ${tx.ai_categorized ? '<i class="fas fa-robot text-info" title="AI Categorized"></i>' : ''}
                    ${tx.ai_confidence ? `<small class="text-muted">${(tx.ai_confidence * 100).toFixed(0)}%</small>` : ''}
                </td>
            </tr>
        `).join('');
    }

    displayAIInsights(insights) {
        const container = document.getElementById('ai-insights');
        
        if (!insights || insights.length === 0) {
            container.innerHTML = '<div class="text-muted">No insights available yet</div>';
            return;
        }

        container.innerHTML = insights.map(insight => `
            <div class="mb-2 p-2 bg-light rounded">
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <strong class="text-${insight.type === 'warning' ? 'warning' : 'info'}">
                            ${insight.title}
                        </strong>
                        <div class="small text-muted">${insight.description}</div>
                    </div>
                    <small class="text-muted">${insight.confidence}%</small>
                </div>
            </div>
        `).join('');
    }

    setupEventListeners() {
        // Add transaction form AI enhancement
        const descInput = document.getElementById('transaction-description');
        if (descInput) {
            let timeoutId;
            descInput.addEventListener('input', (e) => {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => {
                    this.getAICategorySuggestion(e.target.value);
                }, 500);
            });
        }
    }

    setupDocumentUpload() {
        // Receipt upload functionality is handled by openReceiptUpload() function
        // Bank statement upload functionality
        window.uploadBankStatement = async () => {
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = '.pdf,.csv';
            fileInput.onchange = async (e) => {
                if (e.target.files.length > 0) {
                    await this.uploadBankStatement(e.target.files[0]);
                }
            };
            fileInput.click();
        };
    }

    async uploadBankStatement(file) {
        const formData = new FormData();
        formData.append('bank_statement', file);
        formData.append('_token', document.querySelector('meta[name="csrf-token"]').content);

        try {
            this.showNotification('Processing bank statement...', 'info');
            
            const response = await fetch('/couples/api/process-bank-statement', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                const result = await response.json();
                this.showNotification(result.message, 'success');
            } else {
                throw new Error('Failed to process bank statement');
            }
        } catch (error) {
            console.error('Error uploading bank statement:', error);
            this.showNotification('Failed to process bank statement', 'error');
        }
    }

    async getAICategorySuggestion(description) {
        if (description.length < 3) return;

        try {
            const response = await fetch(this.aiApiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify({ description, context: 'couples' })
            });

            if (response.ok) {
                const suggestions = await response.json();
                this.displayCategorySuggestions(suggestions);
            }
        } catch (error) {
            console.error('AI categorization error:', error);
        }
    }

    displayCategorySuggestions(suggestions) {
        const container = document.getElementById('ai-suggestions');
        if (!suggestions.categories) return;

        container.innerHTML = `
            <div class="small">
                <strong>AI Suggestions:</strong>
                ${suggestions.categories.slice(0, 3).map(cat => 
                    `<span class="badge badge-info mr-1 cursor-pointer" 
                           onclick="selectAICategory('${cat.id}', '${cat.name}')">${cat.name}</span>`
                ).join('')}
            </div>
        `;
    }

    setupRealTimeUpdates() {
        // If Supabase is available, set up real-time subscriptions
        if (typeof supabase !== 'undefined') {
            this.setupSupabaseSubscriptions();
        } else {
            // Fallback to periodic updates
            setInterval(() => this.loadCouplesData(), 30000); // 30 seconds
        }
    }

    setupSupabaseSubscriptions() {
        // Real-time transaction updates via Supabase
        supabase
            .channel('couples-transactions')
            .on('postgres_changes', {
                event: '*',
                schema: 'public',
                table: 'transactions'
            }, (payload) => {
                console.log('Real-time transaction update:', payload);
                this.loadCouplesData(); // Refresh dashboard
            })
            .subscribe();
    }

    updateConnectionStatus(status, type) {
        const statusEl = document.getElementById('connection-status');
        statusEl.textContent = status;
        statusEl.className = `badge badge-${type}`;
    }

    formatDate(dateString) {
        return new Date(dateString).toLocaleDateString();
    }

    getAssignmentBadgeColor(assignment) {
        switch (assignment) {
            case 'partner1': return 'info';
            case 'partner2': return 'success';
            case 'shared': return 'warning';
            default: return 'secondary';
        }
    }

    // Receipt upload functionality
    async uploadReceipt(file) {
        try {
            this.showProcessingIndicator('Processing receipt with AI...');
            
            const formData = new FormData();
            formData.append('receipt', file);
            
            const response = await fetch('/couples/upload-receipt', {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                },
                body: formData
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            // Show extracted data for review
            this.showExtractedDataReview(result);
            
        } catch (error) {
            console.error('Receipt upload error:', error);
            this.showError('Failed to process receipt: ' + error.message);
        } finally {
            this.hideProcessingIndicator();
        }
    }

    // AI Analysis functionality
    async runAIAnalysis() {
        try {
            this.showProcessingIndicator('Running AI analysis...');
            
            const response = await fetch('/couples/ai-analysis', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify({
                    analysis_type: 'spending_patterns',
                    date_range: 'last_30_days'
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const analysis = await response.json();
            this.displayAIAnalysis(analysis);
            
        } catch (error) {
            console.error('AI analysis error:', error);
            this.showError('Failed to run AI analysis: ' + error.message);
        } finally {
            this.hideProcessingIndicator();
        }
    }

    // Submit transaction from modal
    async submitTransaction() {
        try {
            const formData = new FormData(document.getElementById('addTransactionForm'));
            
            const response = await fetch('/couples/transactions', {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                },
                body: formData
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            // Close modal and refresh data
            const modal = bootstrap.Modal.getInstance(document.getElementById('addTransactionModal'));
            modal.hide();
            
            // Reset form
            document.getElementById('addTransactionForm').reset();
            
            // Refresh dashboard
            this.loadCouplesData();
            
            this.showSuccess('Transaction added successfully!');
            
        } catch (error) {
            console.error('Transaction submission error:', error);
            this.showError('Failed to add transaction: ' + error.message);
        }
    }

    // Display extracted receipt data for review
    showExtractedDataReview(data) {
        // Populate modal with extracted data
        if (data.extracted_data) {
            document.getElementById('extracted-merchant').value = data.extracted_data.merchant || '';
            document.getElementById('extracted-amount').value = data.extracted_data.amount || '';
            document.getElementById('extracted-date').value = data.extracted_data.date || '';
            document.getElementById('extracted-category').value = data.extracted_data.category || '';
        }
        
        // Show AI suggestions
        if (data.ai_suggestions) {
            document.getElementById('ai-suggested-category').textContent = data.ai_suggestions.category || 'Unknown';
            document.getElementById('ai-confidence').textContent = (data.ai_suggestions.confidence || 0) + '%';
            document.getElementById('ai-assignment').textContent = data.ai_suggestions.partner_assignment || 'Unassigned';
        }
        
        // Show review modal
        const modal = new bootstrap.Modal(document.getElementById('receiptReviewModal'));
        modal.show();
    }

    // Display AI analysis results
    displayAIAnalysis(analysis) {
        const insightsContainer = document.getElementById('ai-insights');
        if (!insightsContainer) return;
        
        let html = '<div class="row">';
        
        if (analysis.spending_patterns) {
            html += `
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5><i class="fas fa-chart-line"></i> Spending Patterns</h5>
                        </div>
                        <div class="card-body">
                            ${analysis.spending_patterns.map(pattern => `
                                <div class="mb-2">
                                    <strong>${pattern.category}</strong>: $${pattern.amount}
                                    <div class="progress" style="height: 8px;">
                                        <div class="progress-bar" style="width: ${pattern.percentage}%"></div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                </div>
            `;
        }
        
        if (analysis.recommendations) {
            html += `
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5><i class="fas fa-lightbulb"></i> AI Recommendations</h5>
                        </div>
                        <div class="card-body">
                            ${analysis.recommendations.map(rec => `
                                <div class="alert alert-info">
                                    <strong>${rec.title}</strong><br>
                                    ${rec.description}
                                </div>
                            `).join('')}
                        </div>
                    </div>
                </div>
            `;
        }
        
        html += '</div>';
        insightsContainer.innerHTML = html;
    }

    // UI Helper methods
    showProcessingIndicator(message) {
        const indicator = document.getElementById('processing-indicator');
        if (indicator) {
            indicator.innerHTML = `<i class="fas fa-spinner fa-spin"></i> ${message}`;
            indicator.style.display = 'block';
        }
    }

    hideProcessingIndicator() {
        const indicator = document.getElementById('processing-indicator');
        if (indicator) {
            indicator.style.display = 'none';
        }
    }

    showSuccess(message) {
        this.showNotification(message, 'success');
    }

    showError(message) {
        this.showNotification(message, 'danger');
    }

    showNotification(message, type) {
        // Create toast notification
        const toast = document.createElement('div');
        toast.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(toast);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 5000);
    }

    // Create transaction from receipt data
    async createTransactionFromReceipt(receiptData) {
        try {
            this.showProcessingIndicator('Creating transaction...');
            
            const transactionData = {
                description: receiptData.merchant,
                amount: receiptData.amount,
                date: receiptData.date,
                category: receiptData.category || receiptData.ai_category,
                partner_assignment: receiptData.partner_assignment,
                source: 'receipt_upload',
                ai_confidence: receiptData.confidence || null
            };
            
            const response = await fetch('/couples/transactions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify(transactionData)
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            // Refresh dashboard
            this.loadCouplesData();
            
            this.showSuccess('Transaction created successfully from receipt!');
            
        } catch (error) {
            console.error('Create transaction error:', error);
            this.showError('Failed to create transaction: ' + error.message);
        } finally {
            this.hideProcessingIndicator();
        }
    }
}

// Global functions for UI interactions
function openAddTransactionModal() {
    try {
        const modal = new bootstrap.Modal(document.getElementById('addTransactionModal'));
        modal.show();
    } catch (error) {
        console.error('Error opening add transaction modal:', error);
        alert('Please wait for the page to fully load before trying again.');
    }
}

function openReceiptUpload() {
    try {
        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.accept = 'image/*,application/pdf';
        fileInput.onchange = async (e) => {
            if (e.target.files.length > 0) {
                if (window.couplesApp && typeof window.couplesApp.uploadReceipt === 'function') {
                    await window.couplesApp.uploadReceipt(e.target.files[0]);
                } else {
                    alert('Please wait for the page to fully load before uploading receipts.');
                }
            }
        };
        fileInput.click();
    } catch (error) {
        console.error('Error opening receipt upload:', error);
        alert('Please wait for the page to fully load before trying again.');
    }
}

function runAIAnalysis() {
    try {
        if (window.couplesApp && typeof window.couplesApp.runAIAnalysis === 'function') {
            window.couplesApp.runAIAnalysis();
        } else {
            alert('Please wait for the page to fully load before running AI analysis.');
        }
    } catch (error) {
        console.error('Error running AI analysis:', error);
        alert('AI analysis is not available right now. Please try again later.');
    }
}

function openGoalsModal() {
    try {
        const modal = new bootstrap.Modal(document.getElementById('goalsModal'));
        modal.show();
    } catch (error) {
        console.error('Error opening goals modal:', error);
        alert('Please wait for the page to fully load before trying again.');
    }
}

function openImportModal() {
    try {
        const modal = new bootstrap.Modal(document.getElementById('importModal'));
        modal.show();
    } catch (error) {
        console.error('Error opening import modal:', error);
        alert('Please wait for the page to fully load before trying again.');
    }
}

function refreshTransactions() {
    try {
        if (window.couplesApp && typeof window.couplesApp.loadCouplesData === 'function') {
            window.couplesApp.loadCouplesData();
        } else {
            window.location.reload();
        }
    } catch (error) {
        console.error('Error refreshing transactions:', error);
        window.location.reload();
    }
}

function viewAllTransactions() {
    try {
        window.location.href = '/couples/transactions';
    } catch (error) {
        console.error('Error viewing all transactions:', error);
    }
}

function submitTransaction() {
    try {
        if (window.couplesApp && typeof window.couplesApp.submitTransaction === 'function') {
            window.couplesApp.submitTransaction();
        } else {
            alert('Please wait for the page to fully load before submitting transactions.');
        }
    } catch (error) {
        console.error('Error submitting transaction:', error);
        alert('Failed to submit transaction. Please try again.');
    }
}

function selectAICategory(categoryId, categoryName) {
    try {
        const categoryInput = document.getElementById('ai-category-input');
        const categoryDisplay = document.getElementById('ai-category-display');
        
        if (categoryInput) categoryInput.value = categoryId;
        if (categoryDisplay) categoryDisplay.textContent = categoryName;
        
        // Close category selection modal if open
        const modalElement = document.getElementById('aiCategoryModal');
        if (modalElement) {
            const modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) modal.hide();
        }
    } catch (error) {
        console.error('Error selecting AI category:', error);
    }
}

function approveReceiptData() {
    try {
        // Get extracted data and create transaction
        const receiptData = {
            merchant: document.getElementById('extracted-merchant')?.value || '',
            amount: document.getElementById('extracted-amount')?.value || '',
            date: document.getElementById('extracted-date')?.value || '',
            category: document.getElementById('extracted-category')?.value || '',
            ai_category: document.getElementById('ai-suggested-category')?.textContent || '',
            partner_assignment: document.getElementById('ai-assignment')?.textContent || ''
        };
        
        // Create transaction from receipt data
        if (window.couplesApp && typeof window.couplesApp.createTransactionFromReceipt === 'function') {
            window.couplesApp.createTransactionFromReceipt(receiptData);
        } else {
            console.error('CouplesApp not ready');
            alert('Please wait for the page to fully load before approving receipt data.');
            return;
        }
        
        // Close modal
        const modalElement = document.getElementById('receiptReviewModal');
        if (modalElement) {
            const modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) modal.hide();
        }
    } catch (error) {
        console.error('Error approving receipt data:', error);
        alert('Failed to approve receipt data. Please try again.');
    }
}
    window.open('/ai?context=couples', '_blank');
}

function openGoalsModal() {
    // Integrate with existing goals/piggy banks system
    window.location.href = '/piggy-banks';
}

function openImportModal() {
    // Use existing data importer
    window.open('/import', '_blank');
}

function refreshTransactions() {
    const icon = document.getElementById('refresh-icon');
    icon.classList.add('fa-spin');
    
    window.couplesApp.loadCouplesData().finally(() => {
        icon.classList.remove('fa-spin');
    });
}

function viewAllTransactions() {
    window.location.href = '/transactions?couples=true';
}

function selectAICategory(categoryId, categoryName) {
    document.getElementById('transaction-category').value = categoryId;
    // Remove suggestions after selection
    document.getElementById('ai-suggestions').innerHTML = 
        `<div class="small text-success">Selected: ${categoryName}</div>`;
}

async function submitTransaction() {
    const form = document.getElementById('addTransactionForm');
    const formData = new FormData(form);
    
    // Add couples-specific data
    formData.append('use_ai_categorization', 'true');
    formData.append('couples_context', 'true');
    
    try {
        const response = await fetch('/couples/api/transactions', {
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
            },
            body: formData
        });

        if (response.ok) {
            const result = await response.json();
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('addTransactionModal'));
            modal.hide();
            form.reset();
            
            // Show success notification
            window.couplesApp.showNotification('Transaction added successfully!', 'success');
            
            // Refresh data
            window.couplesApp.loadCouplesData();
        } else {
            throw new Error('Failed to add transaction');
        }
    } catch (error) {
        console.error('Error adding transaction:', error);
        window.couplesApp.showNotification('Failed to add transaction', 'error');
    }
}

// Initialize enhanced dashboard with error handling
document.addEventListener('DOMContentLoaded', () => {
    try {
        console.log('Initializing Couples Enhanced Dashboard...');
        window.couplesApp = new CouplesEnhancedDashboard();
        console.log('Couples Enhanced Dashboard initialized successfully');
        
        // Make functions globally available for debugging
        window.debugCouplesApp = {
            openAddTransactionModal,
            openReceiptUpload, 
            runAIAnalysis,
            openGoalsModal,
            openImportModal,
            refreshTransactions,
            viewAllTransactions,
            submitTransaction,
            selectAICategory,
            approveReceiptData
        };
        
    } catch (error) {
        console.error('Failed to initialize Couples Enhanced Dashboard:', error);
        
        // Fallback initialization - basic functionality only
        window.couplesApp = {
            showError: (message) => alert('Error: ' + message),
            showSuccess: (message) => alert('Success: ' + message),
            showNotification: (message, type) => alert(message)
        };
    }
});
</script>

<style>
/* Mobile-first responsive design */
@media (max-width: 768px) {
    .container-fluid {
        padding: 0.5rem;
    }
    
    .card-body {
        padding: 1rem;
    }
    
    .table-responsive {
        font-size: 0.875rem;
    }
}

.cursor-pointer {
    cursor: pointer;
}

.progress {
    background-color: rgba(0,0,0,0.1);
}

.badge.cursor-pointer:hover {
    opacity: 0.8;
}

/* Loading animation */
.fa-spin {
    animation: fa-spin 1s infinite linear;
}

@keyframes fa-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Card hover effects */
.card {
    transition: transform 0.2s ease-in-out;
}

.card:hover {
    transform: translateY(-2px);
}

/* AI insights styling */
#ai-insights .bg-light {
    border-left: 3px solid #007bff;
}
</style>
{% endblock %}