{% extends "layout.default" %}

{% block breadcrumbs %}
    {{ Breadcrumbs.render(Route.currentRouteName) }}
{% endblock %}

{% block content %}
<div class="container-fluid" id="couples-dashboard">
    <!-- Real-time Status Banner -->
    <div class="alert alert-info d-flex justify-content-between align-items-center">
        <div>
            <i class="fas fa-sync-alt mr-2"></i>
            <strong>Live Dashboard</strong> - Connected to Supabase & AI Services
        </div>
        <div>
            <span class="badge badge-success" id="connection-status">Connected</span>
            <a href="/ai" class="btn btn-sm btn-outline-info ml-2">
                <i class="fas fa-robot"></i> AI Dashboard
            </a>
        </div>
    </div>

    <!-- Mobile-First Cards Layout -->
    <div class="row">
        <!-- Financial Overview Card -->
        <div class="col-12 col-lg-8 mb-4">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-line mr-2"></i>
                        Couples Financial Overview
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row text-center mb-4">
                        <div class="col-4">
                            <h3 id="total-balance" class="text-primary">$0.00</h3>
                            <small class="text-muted">Total Balance</small>
                        </div>
                        <div class="col-4">
                            <h3 id="monthly-spending" class="text-warning">$0.00</h3>
                            <small class="text-muted">This Month</small>
                        </div>
                        <div class="col-4">
                            <h3 id="shared-expenses" class="text-success">$0.00</h3>
                            <small class="text-muted">Shared</small>
                        </div>
                    </div>

                    <!-- Partner Balance Cards -->
                    <div class="row">
                        <div class="col-6">
                            <div class="card border-info">
                                <div class="card-body text-center p-3">
                                    <div class="mb-2">
                                        <i class="fas fa-user-circle fa-2x text-info"></i>
                                    </div>
                                    <h6 id="partner1-name" class="mb-1">Partner 1</h6>
                                    <h5 id="partner1-balance" class="text-info mb-1">$0.00</h5>
                                    <small class="text-muted">Personal</small>
                                    <div class="progress mt-2" style="height: 5px;">
                                        <div id="partner1-progress" class="progress-bar bg-info" style="width: 50%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="card border-success">
                                <div class="card-body text-center p-3">
                                    <div class="mb-2">
                                        <i class="fas fa-user-circle fa-2x text-success"></i>
                                    </div>
                                    <h6 id="partner2-name" class="mb-1">Partner 2</h6>
                                    <h5 id="partner2-balance" class="text-success mb-1">$0.00</h5>
                                    <small class="text-muted">Personal</small>
                                    <div class="progress mt-2" style="height: 5px;">
                                        <div id="partner2-progress" class="progress-bar bg-success" style="width: 50%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Actions Sidebar -->
        <div class="col-12 col-lg-4 mb-4">
            <div class="card h-100">
                <div class="card-header bg-dark text-white">
                    <h6 class="mb-0">
                        <i class="fas fa-bolt mr-2"></i>
                        Quick Actions
                    </h6>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" onclick="openAddTransactionModal()">
                            <i class="fas fa-plus mr-2"></i>Add Transaction
                        </button>
                        <button class="btn btn-secondary" onclick="openReceiptUpload()">
                            <i class="fas fa-camera mr-2"></i>Upload Receipt
                        </button>
                        <button class="btn btn-info" onclick="runAIAnalysis()">
                            <i class="fas fa-robot mr-2"></i>AI Analysis
                        </button>
                        <button class="btn btn-success" onclick="openGoalsModal()">
                            <i class="fas fa-bullseye mr-2"></i>Manage Goals
                        </button>
                        <button class="btn btn-warning" onclick="openImportModal()">
                            <i class="fas fa-upload mr-2"></i>Import Data
                        </button>
                    </div>

                    <!-- AI Insights Panel -->
                    <div class="mt-4">
                        <h6>
                            <i class="fas fa-lightbulb mr-2"></i>AI Insights
                        </h6>
                        <div id="ai-insights" class="small">
                            <div class="text-muted">Loading AI insights...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Transactions with AI Categories -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-list mr-2"></i>
                        Recent Transactions
                    </h5>
                    <div>
                        <button class="btn btn-sm btn-outline-secondary" onclick="refreshTransactions()">
                            <i class="fas fa-sync" id="refresh-icon"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-primary" onclick="viewAllTransactions()">
                            View All
                        </button>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>Date</th>
                                    <th>Description</th>
                                    <th>Category</th>
                                    <th>Amount</th>
                                    <th>Assigned To</th>
                                    <th>AI</th>
                                </tr>
                            </thead>
                            <tbody id="transactions-table">
                                <tr>
                                    <td colspan="6" class="text-center text-muted py-4">
                                        Loading transactions...
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Transaction Modal -->
<div class="modal fade" id="addTransactionModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus mr-2"></i>Add Transaction with AI
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addTransactionForm">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Description</label>
                            <input type="text" class="form-control" id="transaction-description" 
                                   placeholder="What did you buy?" required>
                            <div id="ai-suggestions" class="mt-2"></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Amount</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="transaction-amount" 
                                       step="0.01" placeholder="0.00" required>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Category</label>
                            <select class="form-select" id="transaction-category">
                                <option value="">AI will categorize...</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Account</label>
                            <select class="form-select" id="transaction-account" required>
                                <option value="">Select account...</option>
                            </select>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Assign to</label>
                        <div class="btn-group w-100" role="group">
                            <input type="radio" class="btn-check" name="assignTo" value="partner1" id="assign-p1">
                            <label class="btn btn-outline-info" for="assign-p1">Partner 1</label>
                            
                            <input type="radio" class="btn-check" name="assignTo" value="partner2" id="assign-p2">
                            <label class="btn btn-outline-success" for="assign-p2">Partner 2</label>
                            
                            <input type="radio" class="btn-check" name="assignTo" value="shared" id="assign-shared">
                            <label class="btn btn-outline-warning" for="assign-shared">Shared</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitTransaction()">
                    <i class="fas fa-robot mr-1"></i>Add with AI
                </button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascript %}
<script>
// Enhanced Couples Dashboard - Leveraging Existing Infrastructure
class CouplesEnhancedDashboard {
    constructor() {
        this.user = {{ auth_user() | json_encode | raw }};
        this.apiBaseUrl = '{{ route('api.v1.couples.state') }}';
        this.aiApiUrl = '/ai/categorize'; // Using direct AI endpoint
        this.init();
    }

    async init() {
        this.showLoadingState();
        await this.loadCouplesData();
        await this.loadAIInsights();
        this.setupEventListeners();
        this.setupRealTimeUpdates();
        this.setupDocumentUpload();
    }

    showLoadingState() {
        document.getElementById('connection-status').textContent = 'Connecting...';
        document.getElementById('connection-status').className = 'badge badge-warning';
    }

    async loadCouplesData() {
        try {
            // Use new API endpoint
            const response = await fetch('/couples/api/state', {
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                }
            });

            if (response.ok) {
                const data = await response.json();
                this.updateDashboard(data);
                this.updateConnectionStatus('Connected', 'success');
            } else {
                throw new Error('Failed to load couples data');
            }
        } catch (error) {
            console.error('Error loading couples data:', error);
            this.updateConnectionStatus('Error', 'danger');
        }
    }

    async loadAIInsights() {
        try {
            // Connect to existing AI service
            const response = await fetch('/ai/insights?context=couples', {
                headers: {
                    'Accept': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                }
            });

            if (response.ok) {
                const insights = await response.json();
                this.displayAIInsights(insights);
            }
        } catch (error) {
            console.error('Error loading AI insights:', error);
            document.getElementById('ai-insights').innerHTML = 
                '<div class="text-warning">AI insights temporarily unavailable</div>';
        }
    }

    updateDashboard(data) {
        // Update financial overview
        document.getElementById('total-balance').textContent = 
            `$${(data.totalBalance || 0).toFixed(2)}`;
        document.getElementById('monthly-spending').textContent = 
            `$${(data.monthlySpending || 0).toFixed(2)}`;
        document.getElementById('shared-expenses').textContent = 
            `$${(data.sharedExpenses || 0).toFixed(2)}`;

        // Update partner information
        if (data.partners) {
            document.getElementById('partner1-name').textContent = 
                data.partners.partner1?.name || 'Partner 1';
            document.getElementById('partner1-balance').textContent = 
                `$${(data.partners.partner1?.balance || 0).toFixed(2)}`;
            
            document.getElementById('partner2-name').textContent = 
                data.partners.partner2?.name || 'Partner 2';
            document.getElementById('partner2-balance').textContent = 
                `$${(data.partners.partner2?.balance || 0).toFixed(2)}`;

            // Update progress bars
            const total = (data.partners.partner1?.balance || 0) + (data.partners.partner2?.balance || 0);
            if (total > 0) {
                const p1Percent = ((data.partners.partner1?.balance || 0) / total) * 100;
                const p2Percent = ((data.partners.partner2?.balance || 0) / total) * 100;
                
                document.getElementById('partner1-progress').style.width = `${p1Percent}%`;
                document.getElementById('partner2-progress').style.width = `${p2Percent}%`;
            }
        }

        // Update transactions table
        this.updateTransactionsTable(data.recentTransactions || []);
    }

    updateTransactionsTable(transactions) {
        const tbody = document.getElementById('transactions-table');
        
        if (transactions.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="6" class="text-center text-muted py-4">
                        No transactions found. <a href="#" onclick="openAddTransactionModal()">Add your first transaction</a>
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = transactions.map(tx => `
            <tr>
                <td>${this.formatDate(tx.date)}</td>
                <td>
                    <strong>${tx.description}</strong>
                    ${tx.notes ? `<br><small class="text-muted">${tx.notes}</small>` : ''}
                </td>
                <td>
                    <span class="badge badge-light">${tx.category}</span>
                </td>
                <td class="${tx.amount >= 0 ? 'text-success' : 'text-danger'}">
                    ${tx.amount >= 0 ? '+' : ''}$${Math.abs(tx.amount).toFixed(2)}
                </td>
                <td>
                    <span class="badge badge-${this.getAssignmentBadgeColor(tx.assignment)}">
                        ${tx.assignment || 'Unassigned'}
                    </span>
                </td>
                <td>
                    ${tx.ai_categorized ? '<i class="fas fa-robot text-info" title="AI Categorized"></i>' : ''}
                    ${tx.ai_confidence ? `<small class="text-muted">${(tx.ai_confidence * 100).toFixed(0)}%</small>` : ''}
                </td>
            </tr>
        `).join('');
    }

    displayAIInsights(insights) {
        const container = document.getElementById('ai-insights');
        
        if (!insights || insights.length === 0) {
            container.innerHTML = '<div class="text-muted">No insights available yet</div>';
            return;
        }

        container.innerHTML = insights.map(insight => `
            <div class="mb-2 p-2 bg-light rounded">
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <strong class="text-${insight.type === 'warning' ? 'warning' : 'info'}">
                            ${insight.title}
                        </strong>
                        <div class="small text-muted">${insight.description}</div>
                    </div>
                    <small class="text-muted">${insight.confidence}%</small>
                </div>
            </div>
        `).join('');
    }

    setupEventListeners() {
        // Add transaction form AI enhancement
        const descInput = document.getElementById('transaction-description');
        if (descInput) {
            let timeoutId;
            descInput.addEventListener('input', (e) => {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => {
                    this.getAICategorySuggestion(e.target.value);
                }, 500);
            });
        }
    }

    setupDocumentUpload() {
        // Receipt upload functionality is handled by openReceiptUpload() function
        // Bank statement upload functionality
        window.uploadBankStatement = async () => {
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = '.pdf,.csv';
            fileInput.onchange = async (e) => {
                if (e.target.files.length > 0) {
                    await this.uploadBankStatement(e.target.files[0]);
                }
            };
            fileInput.click();
        };
    }

    async uploadBankStatement(file) {
        const formData = new FormData();
        formData.append('bank_statement', file);
        formData.append('_token', document.querySelector('meta[name="csrf-token"]').content);

        try {
            this.showNotification('Processing bank statement...', 'info');
            
            const response = await fetch('/couples/api/process-bank-statement', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                const result = await response.json();
                this.showNotification(result.message, 'success');
            } else {
                throw new Error('Failed to process bank statement');
            }
        } catch (error) {
            console.error('Error uploading bank statement:', error);
            this.showNotification('Failed to process bank statement', 'error');
        }
    }

    async getAICategorySuggestion(description) {
        if (description.length < 3) return;

        try {
            const response = await fetch(this.aiApiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify({ description, context: 'couples' })
            });

            if (response.ok) {
                const suggestions = await response.json();
                this.displayCategorySuggestions(suggestions);
            }
        } catch (error) {
            console.error('AI categorization error:', error);
        }
    }

    displayCategorySuggestions(suggestions) {
        const container = document.getElementById('ai-suggestions');
        if (!suggestions.categories) return;

        container.innerHTML = `
            <div class="small">
                <strong>AI Suggestions:</strong>
                ${suggestions.categories.slice(0, 3).map(cat => 
                    `<span class="badge badge-info mr-1 cursor-pointer" 
                           onclick="selectAICategory('${cat.id}', '${cat.name}')">${cat.name}</span>`
                ).join('')}
            </div>
        `;
    }

    setupRealTimeUpdates() {
        // If Supabase is available, set up real-time subscriptions
        if (typeof supabase !== 'undefined') {
            this.setupSupabaseSubscriptions();
        } else {
            // Fallback to periodic updates
            setInterval(() => this.loadCouplesData(), 30000); // 30 seconds
        }
    }

    setupSupabaseSubscriptions() {
        // Real-time transaction updates via Supabase
        supabase
            .channel('couples-transactions')
            .on('postgres_changes', {
                event: '*',
                schema: 'public',
                table: 'transactions'
            }, (payload) => {
                console.log('Real-time transaction update:', payload);
                this.loadCouplesData(); // Refresh dashboard
            })
            .subscribe();
    }

    updateConnectionStatus(status, type) {
        const statusEl = document.getElementById('connection-status');
        statusEl.textContent = status;
        statusEl.className = `badge badge-${type}`;
    }

    formatDate(dateString) {
        return new Date(dateString).toLocaleDateString();
    }

    getAssignmentBadgeColor(assignment) {
        switch (assignment) {
            case 'partner1': return 'info';
            case 'partner2': return 'success';
            case 'shared': return 'warning';
            default: return 'secondary';
        }
    }
}

// Global functions for UI interactions
function openAddTransactionModal() {
    const modal = new bootstrap.Modal(document.getElementById('addTransactionModal'));
    modal.show();
}

function openReceiptUpload() {
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = 'image/*,application/pdf';
    fileInput.onchange = async (e) => {
        if (e.target.files.length > 0) {
            await window.couplesApp.uploadReceipt(e.target.files[0]);
        }
    };
    fileInput.click();
}

function runAIAnalysis() {
    // Open existing AI dashboard with couples context
    window.open('/ai?context=couples', '_blank');
}

function openGoalsModal() {
    // Integrate with existing goals/piggy banks system
    window.location.href = '/piggy-banks';
}

function openImportModal() {
    // Use existing data importer
    window.open('/import', '_blank');
}

function refreshTransactions() {
    const icon = document.getElementById('refresh-icon');
    icon.classList.add('fa-spin');
    
    window.couplesApp.loadCouplesData().finally(() => {
        icon.classList.remove('fa-spin');
    });
}

function viewAllTransactions() {
    window.location.href = '/transactions?couples=true';
}

function selectAICategory(categoryId, categoryName) {
    document.getElementById('transaction-category').value = categoryId;
    // Remove suggestions after selection
    document.getElementById('ai-suggestions').innerHTML = 
        `<div class="small text-success">Selected: ${categoryName}</div>`;
}

async function submitTransaction() {
    const form = document.getElementById('addTransactionForm');
    const formData = new FormData(form);
    
    // Add couples-specific data
    formData.append('use_ai_categorization', 'true');
    formData.append('couples_context', 'true');
    
    try {
        const response = await fetch('/couples/api/transactions', {
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
            },
            body: formData
        });

        if (response.ok) {
            const result = await response.json();
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('addTransactionModal'));
            modal.hide();
            form.reset();
            
            // Show success notification
            window.couplesApp.showNotification('Transaction added successfully!', 'success');
            
            // Refresh data
            window.couplesApp.loadCouplesData();
        } else {
            throw new Error('Failed to add transaction');
        }
    } catch (error) {
        console.error('Error adding transaction:', error);
        window.couplesApp.showNotification('Failed to add transaction', 'error');
    }
}

// Initialize enhanced dashboard
document.addEventListener('DOMContentLoaded', () => {
    window.couplesApp = new CouplesEnhancedDashboard();
});
</script>

<style>
/* Mobile-first responsive design */
@media (max-width: 768px) {
    .container-fluid {
        padding: 0.5rem;
    }
    
    .card-body {
        padding: 1rem;
    }
    
    .table-responsive {
        font-size: 0.875rem;
    }
}

.cursor-pointer {
    cursor: pointer;
}

.progress {
    background-color: rgba(0,0,0,0.1);
}

.badge.cursor-pointer:hover {
    opacity: 0.8;
}

/* Loading animation */
.fa-spin {
    animation: fa-spin 1s infinite linear;
}

@keyframes fa-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Card hover effects */
.card {
    transition: transform 0.2s ease-in-out;
}

.card:hover {
    transform: translateY(-2px);
}

/* AI insights styling */
#ai-insights .bg-light {
    border-left: 3px solid #007bff;
}
</style>
{% endblock %}