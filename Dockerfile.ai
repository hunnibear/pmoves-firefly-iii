# AI-Enhanced Dockerfile for Firefly III with Python and LangExtract
FROM fireflyiii/core:latest

# Switch to root for package installation
USER root

# Set environment variables for Python and AI
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHON_PATH=/usr/bin/python3

# Build arguments
ARG BUILD_DATE
ARG VERSION
ARG REVISION

# Labels for container management
LABEL maintainer="cataclysmstudios@gmail.com" \
      org.opencontainers.image.title="Firefly III with AI Integration" \
      org.opencontainers.image.description="Personal finances manager with AI capabilities and LangExtract" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${REVISION}"

# Install system dependencies for AI and Python
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Python and pip
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    # Build tools for Python packages
    build-essential \
    gcc \
    g++ \
    # System utilities
    curl \
    wget \
    ca-certificates \
    git \
    # Image processing libraries (for OCR if needed)
    libgl1-mesa-glx \
    libglib2.0-0 \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Create Python virtual environment for AI processing
RUN python3 -m venv /opt/ai-env \
    && /opt/ai-env/bin/pip install --no-cache-dir --upgrade pip setuptools wheel

# Install Python AI dependencies
RUN /opt/ai-env/bin/pip install --no-cache-dir \
    # Core AI libraries
    requests>=2.31.0 \
    numpy>=1.24.0 \
    # LangExtract and dependencies
    langextract \
    # Ollama client
    ollama \
    # Additional AI libraries
    openai>=1.3.0 \
    anthropic>=0.7.0 \
    google-generativeai>=0.3.0 \
    # Utility libraries
    python-dateutil>=2.8.0 \
    pydantic>=2.0.0 \
    # JSON handling
    jsonschema>=4.0.0 \
    # HTTP libraries
    httpx>=0.24.0 \
    # Async support
    asyncio-mqtt>=0.13.0

# Create symlink for system-wide access to AI environment
RUN ln -sf /opt/ai-env/bin/python /usr/local/bin/python-ai \
    && ln -sf /opt/ai-env/bin/pip /usr/local/bin/pip-ai

# Create directories for AI processing
RUN mkdir -p /var/www/html/ai-scripts \
    && mkdir -p /var/www/html/storage/ai-temp \
    && mkdir -p /var/www/html/storage/langextract

# Copy AI processing scripts
# Copy AI scripts and requirements
COPY --chown=www-data:www-data ai-scripts/ /var/www/html/ai-scripts/
COPY --chown=www-data:www-data requirements.txt /var/www/html/
COPY --chown=www-data:www-data ai-requirements.txt /var/www/html/

# Make the test script executable
RUN chmod +x /var/www/html/ai-scripts/test_langextract.py \
    && chmod +x /var/www/html/ai-scripts/ai-entrypoint.sh \
    && cp /var/www/html/ai-scripts/ai-entrypoint.sh /usr/local/bin/ai-entrypoint.sh

# Set proper permissions for AI directories
RUN chown -R www-data:www-data /var/www/html/ai-scripts \
    && chown -R www-data:www-data /var/www/html/storage/ai-temp \
    && chown -R www-data:www-data /var/www/html/storage/langextract \
    && chmod -R 755 /var/www/html/ai-scripts \
    && chmod -R 755 /var/www/html/storage/ai-temp \
    && chmod -R 755 /var/www/html/storage/langextract

# Configure PHP for AI processing
RUN echo "memory_limit = 1G" >> /usr/local/etc/php/conf.d/memory.ini \
    && echo "max_execution_time = 600" >> /usr/local/etc/php/conf.d/execution.ini \
    && echo "upload_max_filesize = 64M" >> /usr/local/etc/php/conf.d/upload.ini \
    && echo "post_max_size = 64M" >> /usr/local/etc/php/conf.d/upload.ini \
    && echo "max_input_time = 300" >> /usr/local/etc/php/conf.d/input.ini

# Add AI-specific health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=5 \
    CMD curl -f http://localhost:8080/health && /opt/ai-env/bin/python /var/www/html/ai-scripts/test_langextract.py || exit 1

# Security: Create non-root user for AI processing
RUN if ! id -u aiuser >/dev/null 2>&1; then \
        useradd -r -s /bin/false -d /var/www/html aiuser; \
    fi

# Expose standard port
EXPOSE 8080

# Set AI-specific environment variables
ENV LANGEXTRACT_ENABLED=true
ENV PYTHON_AI_PATH=/opt/ai-env/bin/python
ENV AI_PROCESSING_ENABLED=true

# Use AI-enhanced entrypoint
ENTRYPOINT ["/usr/local/bin/ai-entrypoint.sh"]